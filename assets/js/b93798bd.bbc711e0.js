"use strict";(self.webpackChunkts_rest=self.webpackChunkts_rest||[]).push([[262],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>m});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function s(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var i=r.createContext({}),l=function(t){var e=r.useContext(i),n=e;return t&&(n="function"==typeof t?t(e):s(s({},e),t)),n},p=function(t){var e=l(t.components);return r.createElement(i.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,i=t.parentName,p=c(t,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,s(s({ref:e},p),{},{components:n})):r.createElement(f,s({ref:e},p))}));function m(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,s=new Array(a);s[0]=d;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=t,c.mdxType="string"==typeof t?t:o,s[1]=c;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6242:(t,e,n)=>{n.r(e),n.d(e,{contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>l,toc:()=>p});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),s=["components"],c={sidebar_position:1},i="Create a Contract",l={unversionedId:"tutorial-contract/create-a-contract",id:"tutorial-contract/create-a-contract",title:"Create a Contract",description:"Installation",source:"@site/docs/tutorial-contract/create-a-contract.md",sourceDirName:"tutorial-contract",slug:"/tutorial-contract/create-a-contract",permalink:"/docs/tutorial-contract/create-a-contract",editUrl:"https://github.com/ts-rest/ts-rest/docs/tutorial-contract/create-a-contract.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"tRPC",permalink:"/docs/intro"},next:{title:"Express",permalink:"/docs/tutorial-server/express"}},p=[{value:"Installation",id:"installation",children:[],level:2},{value:"Complete Example",id:"complete-example",children:[],level:2}],u={toc:p};function d(t){var e=t.components,n=(0,o.Z)(t,s);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"create-a-contract"},"Create a Contract"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Install @ts-rest/core"),(0,a.kt)("p",null,"npm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @ts-rest/core\n")),(0,a.kt)("p",null,"yarn"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @ts-rest/core\n")),(0,a.kt)("h2",{id:"complete-example"},"Complete Example"),(0,a.kt)("p",null,"Zod is optional, but I recommend using it to validate your request bodies in the server implementation."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { initTsCont } from '@ts-rest/core';\nimport { z } from 'zod';\n\nconst c = initTsCont();\n\nexport type Post = {\n  id: string;\n  title: string;\n  description: string | null;\n  content: string | null;\n  published: boolean;\n  authorId: string;\n};\n\n// Three endpoints, two for posts, and one for health\nexport const router = c.router({\n  posts: c.router({\n    getPost: c.query({\n      method: 'GET',\n      path: ({ id }: { id: string }) => `/posts/${id}`,\n      response: c.response<Post | null>(),\n      query: null,\n    }),\n    getPosts: c.query({\n      method: 'GET',\n      path: () => '/posts',\n      response: c.response<Post[]>(),\n      query: z.object({\n        take: z.number().optional(),\n        skip: z.number().optional(),\n      }),\n    }),\n    createPost: c.mutation({\n      method: 'POST',\n      path: () => '/posts',\n      response: c.response<Post>(),\n      body: z.object({\n        title: z.string(),\n        content: z.string(),\n        published: z.boolean().optional(),\n        description: z.string().optional(),\n        authorId: z.string(),\n      }),\n    }),\n  }),\n  health: c.query({\n    method: 'GET',\n    path: () => '/health',\n    response: c.response<{ message: string }>(),\n    query: null,\n  }),\n});\n")))}d.isMDXComponent=!0}}]);