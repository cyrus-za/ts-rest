"use strict";(self.webpackChunkts_rest=self.webpackChunkts_rest||[]).push([[12],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||s;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3410:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var r=n(7462),o=n(3366),s=(n(7294),n(3905)),a=["components"],i={sidebar_position:1},l="Express",p={unversionedId:"tutorial-server/express",id:"tutorial-server/express",title:"Express",description:"Installation",source:"@site/docs/tutorial-server/express.md",sourceDirName:"tutorial-server",slug:"/tutorial-server/express",permalink:"/docs/tutorial-server/express",editUrl:"https://github.com/ts-rest/ts-rest/docs/tutorial-server/express.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Create a Contract",permalink:"/docs/tutorial-contract/create-a-contract"},next:{title:"Nest.js",permalink:"/docs/tutorial-server/nestjs"}},c=[{value:"Installation",id:"installation",children:[],level:2},{value:"Complete Example",id:"complete-example",children:[],level:2}],u={toc:c};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"express"},"Express"),(0,s.kt)("h2",{id:"installation"},"Installation"),(0,s.kt)("p",null,"Install @ts-rest/core"),(0,s.kt)("p",null,"npm"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @ts-rest/core\n")),(0,s.kt)("p",null,"yarn"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @ts-rest/core\n")),(0,s.kt)("h2",{id:"complete-example"},"Complete Example"),(0,s.kt)("p",null,"Zod is optional, but I recommend using it to validate your request bodies in the server implementation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript"},"import { initTsCont } from '@ts-rest/core';\nimport { z } from 'zod';\n\nconst c = initTsCont();\n\nexport type Post = {\n  id: string;\n  title: string;\n  description: string | null;\n  content: string | null;\n  published: boolean;\n  authorId: string;\n};\n\n// Three endpoints, two for posts, and one for health\nexport const router = c.router({\n  posts: c.router({\n    getPost: c.query({\n      method: 'GET',\n      path: ({ id }: { id: string }) => `/posts/${id}`,\n      response: c.response<Post | null>(),\n      query: null,\n    }),\n    getPosts: c.query({\n      method: 'GET',\n      path: () => '/posts',\n      response: c.response<Post[]>(),\n      query: z.object({\n        take: z.number().optional(),\n        skip: z.number().optional(),\n      }),\n    }),\n    createPost: c.mutation({\n      method: 'POST',\n      path: () => '/posts',\n      response: c.response<Post>(),\n      body: z.object({\n        title: z.string(),\n        content: z.string(),\n        published: z.boolean().optional(),\n        description: z.string().optional(),\n        authorId: z.string(),\n      }),\n    }),\n  }),\n  health: c.query({\n    method: 'GET',\n    path: () => '/health',\n    response: c.response<{ message: string }>(),\n    query: null,\n  }),\n});\n")))}d.isMDXComponent=!0}}]);